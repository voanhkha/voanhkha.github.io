---
layout: post
comments: true
title: Write a Python TSP solver from scratch!
excerpt: "How a custom TSP problem forced us to write custom algorithms and finally seized rank 8/1874 in Kaggle Santa 2018! (plus an introduction to Kotlin!)"
mathjax: true
date:   2019-01-11 00:00:00
author: Kha Vo
categories: Kaggle
tags:	AI
cover:  "/assets/instacode.png"
---

This is my first time writing and optimizing from scratch a Python script that solves a traveling salesman problem (TSP) for the Kaggle Santa 2018 competition. <br><br>

And this solution brought me my 2nd Kaggle competition GOLD MEDAL! I'm very happy! <br><br>

The reason why a custom Python solver must be used instead of commercial or open-source solvers such as Concorde, LKH... is that Kaggle inserted a really tricky constraint into the original TSP problem. <br>
What they did is that instead of a traditional TSP problem where we need to find the shortest possible path through 200K cities, but with a constraint that every 10th step is 10% more lengthy unless coming from a prime CityId. (the start city is also appointed) <br><br>

In a nutshell, "prime" CityId here means nothing but just random fixed cities among a forest of 200K cities. Just this simple constraint invalids all existing open-source or commercial solvers. What we can do best with those solvers is to generate the non-constraint path (indeed we did with LKH3), then further optimize that path with our custom optimizer. <br><br>

![solution_visual](https://www.kaggleusercontent.com/kf/8187253/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..u-xzgC-ByTjprmAT3-ikmQ.H1lImyJ6vsMhmSBYgBweWSx2dLD_strBhnVdDYKoMfp-5dqoodFs6dRQrN-s2wXtGq43BpZsDFTnX9Xd6wZ7vKs_H6qazhvG9OEw-ZCJ7TUiygE-lm2muMDcVSgTkAmDHLsvzX2DMleFIRaOxpjILEnhpnrxM7hCk57iw3jyxikSEmAUs2fuMZ_sSejEn3mKQvTzPN1vtXkNvfEkSbDEN1S3y9uSc3IkdIIzeIzoLiXC3KlJbs_UcNcoejPtgzDqe38bXqxjilH4RJsp_zuPmm1Hq4HDXEPwWItBpZ4hix1m3aIQh0QzC8z1sKbKtU8-n4gzDB4ndWPHRuU7H4B3pYke9ZlZdXDvDBUo6wJF0kq_Yy84GcUhFOzwm2ypODnQ_tW2PdwQi-6ZruW_cguCKv17Kubyg9aqf3IEN-HNMuAE3S51NY08rtXRk_6xjSdaA_KeYlITNfvieGOfLE4CEYVJ3kzfWX-PrtypVHZ36KHhco1APYvSKp40E5mw7s7PiPjtlcQ0AKcKePVVPKYYq32KTq7CsVBzu-BCGfpQrLT2tYA4RouGUA7TRB4CkmxQdwfCUwlBQoYlwRacfzWI_kCU3YG_qA_rpAYDB5G9XipyTnGa0UATM9vxACqO8RJnPTR-IhySYgz2AK-PAf8ZyUAzBIgMMq-TF8fRbqky9JA.1rBJ7hNMhb9dJ2d9B5VoNg/__results___files/__results___63_0.png) 
<div style="text-align: center;">
  *Purple points: every 10th cities in the path. Green points: prime cities.*
</div>
<br><br>

The best thing about this year's Santa is that the optimal solution was never been found! For most of other Santa competitions on Kaggle, the problem scale is often not this big and not allowing competitors to get creative on their optimization solution, instead with just a race to the known optimal once 2 or 3 teams with the identical score surge on top of the leaderboard.<br><br>

This year's Santa was the best Santa (I wrote this line in 2025) that I have ever competed so far! <br><br>

Please read my solution write-up and code below: <br>
[My Kaggle solution write-up](https://www.kaggle.com/competitions/traveling-santa-2018-prime-paths/discussion/77257)
[My Kaggle solution code](https://www.kaggle.com/code/khahuras/super-fast-cumsum-trick-8th-place-demo-solution)
[My full code](https://github.com/voanhkha/Traveling-Santa-2018-Kaggle)
